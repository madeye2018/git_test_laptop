// Generated by gencpp from file dyros_jet_msgs/JointState.msg
// DO NOT EDIT!


#ifndef DYROS_JET_MSGS_MESSAGE_JOINTSTATE_H
#define DYROS_JET_MSGS_MESSAGE_JOINTSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dyros_jet_msgs
{
template <class ContainerAllocator>
struct JointState_
{
  typedef JointState_<ContainerAllocator> Type;

  JointState_()
    : name()
    , angle()
    , velocity()
    , current()
    , error()  {
    }
  JointState_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , angle(_alloc)
    , velocity(_alloc)
    , current(_alloc)
    , error(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  _name_type name;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _angle_type;
  _angle_type angle;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _velocity_type;
  _velocity_type velocity;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _current_type;
  _current_type current;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _error_type;
  _error_type error;



  enum {
    INPUT_VOLTAGE_ERROR = 1u,
    MOTOR_HALL_SENSOR_ERROR = 2u,
    OVERHEAT_ERROR = 4u,
    MOTOR_ENCODER_ERROR = 8u,
    ELECTRONICAL_SHOCK_ERROR = 16u,
    OVERLOAD_ERROR = 32u,
    RESERVED_ERROR = 64u,
    NOT_UPDATED = 128u,
  };


  typedef boost::shared_ptr< ::dyros_jet_msgs::JointState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dyros_jet_msgs::JointState_<ContainerAllocator> const> ConstPtr;

}; // struct JointState_

typedef ::dyros_jet_msgs::JointState_<std::allocator<void> > JointState;

typedef boost::shared_ptr< ::dyros_jet_msgs::JointState > JointStatePtr;
typedef boost::shared_ptr< ::dyros_jet_msgs::JointState const> JointStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dyros_jet_msgs::JointState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dyros_jet_msgs::JointState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dyros_jet_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'dyros_jet_msgs': ['/home/rui/catkin_ws/src/Humanoid2020FallHW/dyros_jet_msgs/msg', '/home/rui/catkin_ws/devel/share/dyros_jet_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dyros_jet_msgs::JointState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dyros_jet_msgs::JointState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dyros_jet_msgs::JointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dyros_jet_msgs::JointState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dyros_jet_msgs::JointState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dyros_jet_msgs::JointState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dyros_jet_msgs::JointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "44f97ce7a113b09b2cda2af039ff08e1";
  }

  static const char* value(const ::dyros_jet_msgs::JointState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x44f97ce7a113b09bULL;
  static const uint64_t static_value2 = 0x2cda2af039ff08e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::dyros_jet_msgs::JointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dyros_jet_msgs/JointState";
  }

  static const char* value(const ::dyros_jet_msgs::JointState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dyros_jet_msgs::JointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
# DXL Error\n\
uint32 INPUT_VOLTAGE_ERROR	=1\n\
uint32 MOTOR_HALL_SENSOR_ERROR	=2\n\
uint32 OVERHEAT_ERROR		=4\n\
uint32 MOTOR_ENCODER_ERROR	=8\n\
uint32 ELECTRONICAL_SHOCK_ERROR	=16\n\
uint32 OVERLOAD_ERROR		=32\n\
uint32 RESERVED_ERROR		=64\n\
uint32 NOT_UPDATED		=128\n\
\n\
\n\
string[] name\n\
float64[] angle\n\
float64[] velocity\n\
float64[] current\n\
\n\
# bit 0000 0000 0000 0000 0000 0001 0000 0000 = Not updated\n\
# bit 0000 0000 0000 0000 0000 0000 0000 0100 = Not updated, Overheat error\n\
uint32[] error\n\
\n\
";
  }

  static const char* value(const ::dyros_jet_msgs::JointState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dyros_jet_msgs::JointState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.angle);
      stream.next(m.velocity);
      stream.next(m.current);
      stream.next(m.error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dyros_jet_msgs::JointState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dyros_jet_msgs::JointState_<ContainerAllocator>& v)
  {
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "angle[]" << std::endl;
    for (size_t i = 0; i < v.angle.size(); ++i)
    {
      s << indent << "  angle[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.angle[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocity[i]);
    }
    s << indent << "current[]" << std::endl;
    for (size_t i = 0; i < v.current.size(); ++i)
    {
      s << indent << "  current[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.current[i]);
    }
    s << indent << "error[]" << std::endl;
    for (size_t i = 0; i < v.error.size(); ++i)
    {
      s << indent << "  error[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.error[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYROS_JET_MSGS_MESSAGE_JOINTSTATE_H
