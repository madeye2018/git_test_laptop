// Generated by gencpp from file dyros_jet_msgs/WalkingCommand.msg
// DO NOT EDIT!


#ifndef DYROS_JET_MSGS_MESSAGE_WALKINGCOMMAND_H
#define DYROS_JET_MSGS_MESSAGE_WALKINGCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace dyros_jet_msgs
{
template <class ContainerAllocator>
struct WalkingCommand_
{
  typedef WalkingCommand_<ContainerAllocator> Type;

  WalkingCommand_()
    : header()
    , walk_mode(0)
    , compensator_mode()
    , ik_mode(0)
    , heel_toe(false)
    , first_foot_step(false)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , height(0.0)
    , theta(0.0)
    , step_length_x(0.0)
    , step_length_y(0.0)
    , walking_pattern(false)  {
      compensator_mode.assign(false);
  }
  WalkingCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , walk_mode(0)
    , compensator_mode()
    , ik_mode(0)
    , heel_toe(false)
    , first_foot_step(false)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , height(0.0)
    , theta(0.0)
    , step_length_x(0.0)
    , step_length_y(0.0)
    , walking_pattern(false)  {
  (void)_alloc;
      compensator_mode.assign(false);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _walk_mode_type;
  _walk_mode_type walk_mode;

   typedef boost::array<uint8_t, 2>  _compensator_mode_type;
  _compensator_mode_type compensator_mode;

   typedef uint32_t _ik_mode_type;
  _ik_mode_type ik_mode;

   typedef uint8_t _heel_toe_type;
  _heel_toe_type heel_toe;

   typedef uint8_t _first_foot_step_type;
  _first_foot_step_type first_foot_step;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _height_type;
  _height_type height;

   typedef float _theta_type;
  _theta_type theta;

   typedef float _step_length_x_type;
  _step_length_x_type step_length_x;

   typedef float _step_length_y_type;
  _step_length_y_type step_length_y;

   typedef uint8_t _walking_pattern_type;
  _walking_pattern_type walking_pattern;



  enum {
    NONE = 0u,
    STATIC_WALKING = 1u,
    HIP_COMPENSTOR = 0u,
    EXTERNAL_ENCODER = 1u,
    IK = 0u,
    JACOBIAN = 1u,
  };


  typedef boost::shared_ptr< ::dyros_jet_msgs::WalkingCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dyros_jet_msgs::WalkingCommand_<ContainerAllocator> const> ConstPtr;

}; // struct WalkingCommand_

typedef ::dyros_jet_msgs::WalkingCommand_<std::allocator<void> > WalkingCommand;

typedef boost::shared_ptr< ::dyros_jet_msgs::WalkingCommand > WalkingCommandPtr;
typedef boost::shared_ptr< ::dyros_jet_msgs::WalkingCommand const> WalkingCommandConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dyros_jet_msgs::WalkingCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dyros_jet_msgs::WalkingCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dyros_jet_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'dyros_jet_msgs': ['/home/rui/catkin_ws/src/Humanoid2020FallHW/dyros_jet_msgs/msg', '/home/rui/catkin_ws/devel/share/dyros_jet_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dyros_jet_msgs::WalkingCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dyros_jet_msgs::WalkingCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dyros_jet_msgs::WalkingCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dyros_jet_msgs::WalkingCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dyros_jet_msgs::WalkingCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dyros_jet_msgs::WalkingCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dyros_jet_msgs::WalkingCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c577852e6e9b13703209a91d119d29c2";
  }

  static const char* value(const ::dyros_jet_msgs::WalkingCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc577852e6e9b1370ULL;
  static const uint64_t static_value2 = 0x3209a91d119d29c2ULL;
};

template<class ContainerAllocator>
struct DataType< ::dyros_jet_msgs::WalkingCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dyros_jet_msgs/WalkingCommand";
  }

  static const char* value(const ::dyros_jet_msgs::WalkingCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dyros_jet_msgs::WalkingCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
\n\
uint32 walk_mode\n\
uint32 NONE = 0\n\
uint32 STATIC_WALKING = 1\n\
\n\
bool[2] compensator_mode\n\
uint32 HIP_COMPENSTOR = 0\n\
uint32 EXTERNAL_ENCODER = 1\n\
\n\
uint32 ik_mode\n\
uint32 IK=0\n\
uint32 JACOBIAN = 1\n\
\n\
bool heel_toe\n\
\n\
bool first_foot_step\n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
float32 height\n\
float32 theta\n\
float32 step_length_x\n\
float32 step_length_y\n\
\n\
bool walking_pattern\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::dyros_jet_msgs::WalkingCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dyros_jet_msgs::WalkingCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.walk_mode);
      stream.next(m.compensator_mode);
      stream.next(m.ik_mode);
      stream.next(m.heel_toe);
      stream.next(m.first_foot_step);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.height);
      stream.next(m.theta);
      stream.next(m.step_length_x);
      stream.next(m.step_length_y);
      stream.next(m.walking_pattern);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WalkingCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dyros_jet_msgs::WalkingCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dyros_jet_msgs::WalkingCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "walk_mode: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.walk_mode);
    s << indent << "compensator_mode[]" << std::endl;
    for (size_t i = 0; i < v.compensator_mode.size(); ++i)
    {
      s << indent << "  compensator_mode[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.compensator_mode[i]);
    }
    s << indent << "ik_mode: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ik_mode);
    s << indent << "heel_toe: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.heel_toe);
    s << indent << "first_foot_step: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.first_foot_step);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
    s << indent << "step_length_x: ";
    Printer<float>::stream(s, indent + "  ", v.step_length_x);
    s << indent << "step_length_y: ";
    Printer<float>::stream(s, indent + "  ", v.step_length_y);
    s << indent << "walking_pattern: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.walking_pattern);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYROS_JET_MSGS_MESSAGE_WALKINGCOMMAND_H
