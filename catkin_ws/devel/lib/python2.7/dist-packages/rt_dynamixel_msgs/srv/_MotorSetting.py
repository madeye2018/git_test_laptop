# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rt_dynamixel_msgs/MotorSettingRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorSettingRequest(genpy.Message):
  _md5sum = "fa57006293ff4f56089dba8a7218e23b"
  _type = "rt_dynamixel_msgs/MotorSettingRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
uint8 SET_HOMING_OFFSET=17
uint8 GET_HOMING_OFFSET=18
uint8 SET_TORQUE_ENABLE=19
uint8 SET_GOAL_POSITION=20

int32 mode
int32 id
int64 value
float64 fvalue
"""
  # Pseudo-constants
  SET_HOMING_OFFSET = 17
  GET_HOMING_OFFSET = 18
  SET_TORQUE_ENABLE = 19
  SET_GOAL_POSITION = 20

  __slots__ = ['mode','id','value','fvalue']
  _slot_types = ['int32','int32','int64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mode,id,value,fvalue

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorSettingRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mode is None:
        self.mode = 0
      if self.id is None:
        self.id = 0
      if self.value is None:
        self.value = 0
      if self.fvalue is None:
        self.fvalue = 0.
    else:
      self.mode = 0
      self.id = 0
      self.value = 0
      self.fvalue = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2iqd().pack(_x.mode, _x.id, _x.value, _x.fvalue))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.mode, _x.id, _x.value, _x.fvalue,) = _get_struct_2iqd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2iqd().pack(_x.mode, _x.id, _x.value, _x.fvalue))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.mode, _x.id, _x.value, _x.fvalue,) = _get_struct_2iqd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2iqd = None
def _get_struct_2iqd():
    global _struct_2iqd
    if _struct_2iqd is None:
        _struct_2iqd = struct.Struct("<2iqd")
    return _struct_2iqd
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rt_dynamixel_msgs/MotorSettingResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorSettingResponse(genpy.Message):
  _md5sum = "2d24c7dd53dc7c2fd1b5a1f364f18349"
  _type = "rt_dynamixel_msgs/MotorSettingResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 result
int64 value




"""
  __slots__ = ['result','value']
  _slot_types = ['int32','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result,value

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorSettingResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = 0
      if self.value is None:
        self.value = 0
    else:
      self.result = 0
      self.value = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_iq().pack(_x.result, _x.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.result, _x.value,) = _get_struct_iq().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_iq().pack(_x.result, _x.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.result, _x.value,) = _get_struct_iq().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_iq = None
def _get_struct_iq():
    global _struct_iq
    if _struct_iq is None:
        _struct_iq = struct.Struct("<iq")
    return _struct_iq
class MotorSetting(object):
  _type          = 'rt_dynamixel_msgs/MotorSetting'
  _md5sum = '1c80fb3348bbb124fc72557f61e2f00b'
  _request_class  = MotorSettingRequest
  _response_class = MotorSettingResponse
